[optional_header]
; Entry Point RVA
;AddressOfEntryPoint

; Base of Code RVA
;BaseOfCode

; Base of Data RVA (PE32 files only)
;BaseOfData

; Enables to set PE directories rvas and sizes. Each parameter in the section has
; the form of <DirName>.rva or <DirName>.size where DirName name specifies PE dir
; to be set. The following names are recognized: ExportTab, ImportTab, ResourceTab,
; ExceptionTab, CertificateTab, BaseRelocTab, Debug, Architecture, GlobalPtr,
; TLSTab, LoadConfigTab, BoundImportTab, IAT, DelayImportDesc, CLRRuntimeHeader.
[directories]
; Determines destination RVA of the fixed IDT table patch. The "after_iat"
; string has a special meaning - IDT shall be located just after IAT table.
; If not specified the fixed IDT's RVA is taken from the PE header.
;ImportTab.rva

; Determines destination RVA of the fixed resources. If not specified the fixed
; resources RVA is taken from the PE header. Shall be used only if the fixed
; resources need to be located in other place than the original one.
;ResourceTab.rva

; IAT.rva and IAT.size may be set to 0 to prevent the import patching routine of
; updating the IAT directory with the actually calculated values and leave zeroes
; (it often occurs in PE files).
;IAT.rva = 0
;IAT.size = 0

[sections]
; There is possible to trim some sections from the tail of the section table by
; setting this param to the number of the sections to remove. This is useful
; for cutting unnecessary sections used by an exe packer.
;RemoveTrailingSections

; Global config (for all sections)
;SizeOfRawData = vsize|auto

; Changed name of the section number n; <n> provided in decimal
;<n>.Name

; Changed characteristics of the section number n
;<n>.Characteristics

; Section's virtual size
;<n>.VirtualSize

; Section's RVA. Use with care only for newly added sections.
;<n>.VirtualAddress

; Raw file size. Special values are:
; "vsize": the same size as for VirtualSize
; "auto": auto detection of raw size by truncating tailing zeros at the end of
;         section's memory. May be used only for sections dumped from memory.
;         Use with care for section being moved or extended.
; To remove a given section, there is a need to set its raw and virtual size to 0.
;<n>.SizeOfRawData

; Specifies content of the section number n in the dumped output file. One of:
; "memory": Section will be dumped from memory (default)
; "zeros": Zero fill
; "file: content_file_path": Specifies a file with section content. For this type
;        of sections, the VirtualSize and SizeOfRawData if not specified are
;        deduced from the length of the content file.
;<n>.DumpedContent

[dump_pe]
; output dump file (default: dump.out)
;OutFile

; "no": don't set crc (zero will be written)
; "as_original": crc will be set if the original file also had it set (default)
; "always": always set PE checksum
;SetCrc

; If 1 the dump will save original content between PE headers and beginning of
; the sections. In most cases the space is not used (except the bouded imports
; info which are handled other way) and filled zeroes to the upper round of
; FileAlignment value. If 0 the space is not saved (filled with zeroes) (default
; 0).
;SaveHeaderSpace

; "no": don't bind imports
; "as_original": bind imports if the original file also had bound imports (default)
; "always": always bind imports
;BindImports

; The section contains parameters controlling imports recovery process (imports to
; recover are specified in the [imports] section).
[imports_fix]
; If 1 names of modules and imported procs are not padded by zeros to the even
; length. The PE specification states to always padd, but some compilers do not
; follow the rule. Default 0.
;NoPaddNames

; If 1 ILTs will not be set for restored imports directory. Only the IATs will
; be written. Some compilers (eg. Delphi) never sets ILTs in their binaries.
; Default 0.
;NoILTs

; If the parameter is provided the IDT table (pointed by the ImportTab directory
; entry) will be followed during imports recovery. The Hint/Name table will be
; stored at a place provided by the parameter. Fixed modules names will also be
; a part of the H/N table unless the FollowIDT.NameTab.rva states otherwise.
; NOTE: The parameter must be used only if a packer doesn't destroy the IDT.
; The "dump_search idt" command should be used to check this circumstance. The
; command provides proposition of settings for FollowIDT.HintNameTab.rva,
; FollowIDT.NameTab.rva, NoPaddNames and NoILTs parameters.
;FollowIDT.HintNameTab.rva

; Provides a place for storing fixed modules names other than Hint/Name table.
; The parameter is valid only if FollowIDT.HintNameTab.rva is also provided.
; Use "dump_search idt" command to get proper value for this parameter.
;FollowIDT.NameTab.rva

; The section provides hints for the resolving routing, how to resolve importing
; module in (rather rare) case, when the routine cannot do it by itself due to
; some weird imports forwardings issues used by the importing module.
[mod_conflicts_reslv]
; assume than n'th importing module is 'lib.dll'; <n> provided in decimal
;<n> = lib.dll

; Imports specification describing imports to be patched in the PE file
[imports]
; n'th module name (file name + its extension); <n> provided in decimal
;<n> = lib.dll

; IAT RVA of n'th module.
;<n>.iat_rva

; m'th imported proc of n'th module; <n>,<m> provided in decimal
;<n>.<m> = proc_name
;<n>.<m> = #ord_num

[rsrc_fix]
; Specifies if the recovery process will be performed on the resources during
; the dumping process. The recovery process should be performed only for packers
; modifying the resources by scattering them into many sections. The
; "dump_pe_info rsrc -C" command may be used to detect this situation. The
; remaining parameters in this sections are read, only if recovery process is
; performed.
; "no": no resources recovery (default)
; "yes": resources recovery
; "detect": resources recovery only if resources are scattered to more than 1
;           section.
;RecoverRsrc

; Specifies a place of the resources dir to be read as a source during the fixing
; process. If not specified the source and destination of the fixed resources are
; the same (which is the most common use case). The parameter shall be used only
; if the fixed resources need to be located in other place than the original one.
;ResourceTab.rva

; Padding of resources elements. One of:
; "no": no padding
; "word": 2-bytes padding
; "dword": 4-bytes padding
; "auto": select from above to fit in resource directory size (default).
;PaddRsrc

; File used for resource fixing for storing recovered resources (default
; "TMP_DIR/$rsrc.tmp").
;TmpRsrcFile

; If 1 keep  temporary file after resource recovery process (default 0).
;KeepTmpRsrcFile
